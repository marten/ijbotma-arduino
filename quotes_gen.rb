#!/usr/bin/ruby

require 'csv'

# Compression scheme: the bytes are converted to a string of bits, typically in groups of 5.
# 00000: space
# 00001-11010: a-z or A-Z (initially caps are off)
# 11011: caps on
# 11100: caps off
# 11101: reserved
# 11110: followed by an 8-bit character
# 11111: end of quote

SPACE = [0,0,0,0,0]
CAPS_ON = [1,1,0,1,1]
CAPS_OFF = [1,1,1,0,0]
RESERVED = [1,1,1,0,1]
ESCAPE = [1,1,1,1,0]
EOM = [1,1,1,1,1]

def to_byte(bits)
  byte = 0
  for i in (0...8)
    if bits[i] != 0
      byte += 1 << (7 - i)
    end
  end
  return byte
end

def to_bytes(bits)
  while bits.length % 8 != 0
    bits << 0
  end
  bytes = []
  bits.each_slice(8) do |b|
    bytes << to_byte(b)
  end
  return bytes
end

def to_bits(n, length)
  bits = []
  (length - 1).downto(0) do |i|
    bits << ((n & (1 << i) != 0) ? 1 : 0)
  end
  return bits
end

def compress(s)
  bits = []
  caps = false
  s.split(//).each do |c|
    if c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z'
      if caps && c >= 'a' && c <= 'z'
        bits += CAPS_OFF
        caps = false
      elsif !caps && c >= 'A' && c <= 'Z'
        bits += CAPS_ON
        caps = true
      end
      if c >= 'A' && c <= 'Z'
        n = c.ord - 'A'.ord + 1
      else
        n = c.ord - 'a'.ord + 1
      end
      bits += to_bits(n, 5)
    elsif c == ' '
      bits += SPACE
    else
      bits += ESCAPE
      bits += to_bits(c.ord, 8)
    end
  end
  bits += EOM
  return to_bytes(bits)
end

def c_string(s)
  return '{' + s.split(//).map(&:ord).join(',') + '}'
end

puts '// AUTOGENERATED. DO NOT EDIT. INVOKE \'make\' TO REGENERATE.'
puts ''
puts '#include "quotes.h"'
puts ''
puts '#include <avr/pgmspace.h>'
puts ''

count = 0
uncompressed_size = 0
compressed_size = 0
STDIN.each do |line|
  line.chomp!
  compressed = compress(line)

  uncompressed_size += line.length
  compressed_size += compressed.length

  puts "static char const QUOTE_#{count}[] PROGMEM = {#{compressed.join(',')}};"
  count += 1
end
puts ''

print 'char const *const QUOTES[] PROGMEM = { '
count.times do |i|
  print "QUOTE_#{i}, "
end
puts '};'
puts ''

puts "int const NUM_QUOTES = #{count};"

STDERR.puts "Uncompressed: #{uncompressed_size}\nCompressed:   #{compressed_size}"
